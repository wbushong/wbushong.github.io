ggplot(dexp2, aes(x = individual.ambiguity, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
scale_color_manual(values = c("red", "blue"))
dexp2$ind.amb.bin <- round(dexp2$individual.ambiguity, digits = 3)
unique(dexp2$ind.amb.bin)
dexp2$ind.amb.bin <- mround(dexp2$individual.ambiguity, 0.3)
unique(dexp2$ind.amb.bin)
dexp2$ind.amb.bin <- mround(dexp2$individual.ambiguity, 0.2)
unique(dexp2$ind.amb.bin)
dexp2$ind.amb.bin <- mround(dexp2$individual.ambiguity, 2)
unique(dexp2$ind.amb.bin)
dexp2$ind.amb.bin <- mround(dexp2$individual.ambiguity*100, 2)
unique(dexp2$ind.amb.bin)
dexp2$ind.amb.bin <- round(dexp2$individual.ambiguity, digits = 2)
unique(dexp2$ind.amb.bin)
dexp2$ind.amb.bin <- mround(dexp2$individual.ambiguity, 0.2)
unique(dexp2$ind.amb.bin)
ggplot(dexp2, aes(x = ind.amb.bin, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
scale_color_manual(values = c("red", "blue"))
dexp2$ind.amb.bin <- mround(dexp2$individual.ambiguity, 0.1)
ggplot(dexp2, aes(x = ind.amb.bin, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
scale_color_manual(values = c("red", "blue"))
ggplot(dexp2, aes(x = ambiguity, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
scale_color_manual(values = c("red", "blue"))
m.ambig <- glmer(respond_t ~ ambiguity * context.numeric +
(1 + context.numeric | subject) + (1 + context.numeric * ambiguity | sFrame),
subset(dexp2, ! respBeforeDisambigOffset01), family = "binomial")
summary(m.ambig)
effobj <- as.data.frame(Effect(c("context.numeric", "ambiguity"), m.ambig))
ggplot(subset(effobj, context.numeric %in% c(-1, 1)),
aes(x = ambiguity, y = fit, color = factor(context.numeric),
fill = factor(context.numeric), group = factor(context.numeric))) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue"), name = "Context", labels = c("Dent", "Tent")) +
scale_fill_manual(values = c("red", "blue"), name = "Context", labels = c("Dent", "Tent")) +
theme(legend.position = c(0.8, 0.8))
m.ambig <- glmer(respond_t ~ ambiguity * context.numeric +
(1 + context.numeric | subject) + (1 + context.numeric * ambiguity | sFrame),
d, family = "binomial")
summary(m.ambig)
d %<>%
group_by(VOT) %>%
mutate(ambiguity = abs(mean(respond_t) - 0.5))
m.ambig <- glmer(respond_t ~ ambiguity * context.numeric +
(1 + context.numeric | subject) + (1 + context.numeric * ambiguity | sFrame),
d, family = "binomial")
summary(m.ambig)
effobj <- as.data.frame(Effect(c("context.numeric", "ambiguity"), m.ambig))
ggplot(subset(effobj, context.numeric %in% c(-1, 1)),
aes(x = ambiguity, y = fit, color = factor(context.numeric),
fill = factor(context.numeric), group = factor(context.numeric))) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue"), name = "Context", labels = c("Dent", "Tent")) +
scale_fill_manual(values = c("red", "blue"), name = "Context", labels = c("Dent", "Tent")) +
theme(legend.position = c(0.8, 0.8))
m.ambig.gamm <- gamm(respond_t ~ context.numeric + s(ambiguity, by = context) +
s(Trial, by = context),
random = list(subject = ~ 1 + context.numeric),
data = subset(dexp2, ! respBeforeDisambigOffset01), family = "binomial")
summary(m.ambig.gamm$gam)
m.ambig.gamm <- gamm(respond_t ~ context.numeric + s(ambiguity, by = context, k = 6) +
s(Trial, by = context),
random = list(subject = ~ 1 + context.numeric),
data = subset(dexp2, ! respBeforeDisambigOffset01), family = "binomial")
summary(m.ambig.gamm$gam)
tmp2 <- EvaluateSmooths(m.ambig.gamm$gam)
tmp2$upper <- 1/(1+exp(-(tmp2$value + 1.96*tmp2$se)))
tmp2$lower <- 1/(1+exp(-(tmp2$value - 1.96*tmp2$se)))
tmp2$upper.lo <- tmp2$value + 1.96*tmp2$se
tmp2$lower.lo <- tmp2$value - 1.96*tmp2$se
tmp2$y2 <- 1/(1+exp(-tmp2$value))
ggplot(subset(tmp2, x.var == "ambiguity"), aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue"))
m.ambig.gamm <- gamm(respond_t ~ context.numeric + s(ambiguity, by = context, k = 3) +
s(Trial, by = context),
random = list(subject = ~ 1 + context.numeric),
data = subset(dexp2, ! respBeforeDisambigOffset01), family = "binomial")
m.ambig.gamm <- gamm(respond_t ~ context.numeric + s(ambiguity, by = context, k = 3) +
s(Trial, by = context),
random = list(subject = ~ 1 + context.numeric),
data = subset(dexp2, ! respBeforeDisambigOffset01), family = "binomial")
summary(m.ambig.gamm$gam)
tmp2 <- EvaluateSmooths(m.ambig.gamm$gam)
tmp2$upper <- 1/(1+exp(-(tmp2$value + 1.96*tmp2$se)))
tmp2$lower <- 1/(1+exp(-(tmp2$value - 1.96*tmp2$se)))
tmp2$upper.lo <- tmp2$value + 1.96*tmp2$se
tmp2$lower.lo <- tmp2$value - 1.96*tmp2$se
tmp2$y2 <- 1/(1+exp(-tmp2$value))
ggplot(subset(tmp2, x.var == "ambiguity"), aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue"))
table(d$VOT, d$ambiguity)
ggplot(dexp2, aes(x = ambiguity, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
scale_color_manual(values = c("red", "blue"))
ggplot(d, aes(x = ambiguity, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
scale_color_manual(values = c("red", "blue"))
table(d$VOT, d$individual.ambiguity)
table(dexp2$VOT, dexp2$individual.ambiguity)
table(dexp2$VOT, dexp2$individual.ambiguity)/28
dt <- as.data.frame(t(table(dexp2$VOT, dexp2$individual.ambiguity)/28))
head(dt)
names(dt) <- c("ambiguity", "VOT", "numSubj"))
names(dt) <- c("ambiguity", "VOT", "numSubj")
ggplot(dt)
dt$throw <- (max(dt$ambiguity)+1) - dt$ambiguity
dt$ambiguity <- as.numeric(as.character(dt$ambiguity))
dt$throw <- (max(dt$ambiguity)+1) - dt$ambiguity
dt$throw
cor(dt$ambiguity, dt$throw)
dt$throw <- (max(dt$ambiguity)) - dt$ambiguity
dt$throw
cor(dt$ambiguity, dt$throw)
dt$tmp <- scale(dt$ambiguity)
dt$throw <- (max(dt$tmp)) - dt$tmp
cor(dt$tmp, dt$throw)
dt$thwo
dt$throw
head(dt)
max(dt$tmp)
max(dt$throw)
min(dt$throw)
min(dt$tmp)
dt$throw <- (max(dt$tmp)+1) - dt$tmp
max(dt$throw)
max(dt$tmp)
cor(dt$tmp, dt$throw)
cor(dt$tmp, scale(dt$throw))
dt$throw <- (max(dt$ambiguity)) - dt$ambiguity
head(dt)
setwd("~/Dropbox/Courses/CSP519_SP17/wbushong_labs/Lab9/")
source('~/.active-rstudio-document', echo=TRUE)
pca
pca$loadings
names(pca$loadings)
class(pca$loadings)
pca$loadings[1]
pca$loadings[1, ]
pca$loadings[, 1]
PC1 <- pca$loadings[, 1]
PC1 <- pca$loadings[c("negacd", "negrel", "negfin"), 1]
PC1
PC1.weights <- pca$loadings[c("negacd", "negrel", "negfin"), 1]
PC1.weights <- PC1.weights/sum(PC1.weights)
PC1.weights
PC1.weights <- pca$loadings[c("negacd", "negrel", "negfin"), "RC1"]
PC1.weights
PC2.weights <- pca$loadings[c("posacd", "posrel"), "RC2"]
PC2.weights <- PC2.weights/sum(PC2.weights)
PC1.weights <- PC1.weights/sum(PC1.weights)
PC2.weights
d$PC1.weighted.score <- d$negacd*PC1.weights["negacd"] + d$negrel*PC1.weights["negrel"] + d$negfin*PC1.weights["negfin"]
d$PC2.weighted.score <- d$posacd*PC2.weights["posacd"] + d$posrel*PC2.weights["posrel"]
d$PC1.weighted.score
d$PC1.weighted.score <- d$negacd.z*PC1.weights["negacd"] + d$negrel.z*PC1.weights["negrel"] + d$negfin.z*PC1.weights["negfin"]
d$PC2.weighted.score <- d$posacd.z*PC2.weights["posacd"] + d$posrel.z*PC2.weights["posrel"]
d$PC1.weighted.score
cor(d[, "PC1.weighted.score", "PC1.unit.score", "PC1.exact.score"])
cor(d[, c("PC1.weighted.score", "PC1.unit.score", "PC1.exact.score")])
rm(list=ls())
setwd("~/Dropbox/Projects/UncertaintyMaintenance/exp/response_extension/analysis")
library(tidyverse)
library(lme4)
library(knitr)
library(cowplot)
library(effects)
library(mgcv)
library(itsadug)
library(binom)
library(purrr)
source("~/Dropbox/helper_fns/EvaluateSmooths.R")
options(dplyr.width = Inf)
load("../results/data_preprocessed.RData")
d$respond_t <- as.numeric(d$respWord == "tent")
d$VOT <- as.numeric(as.character(d$VOT))
exclude.by.vot <- split(d, f = d$subject) %>%
map(., ~ glm(respond_t ~ VOT, ., family = "binomial")) %>%
map(summary) %>%
map("coefficients") %>%
map(., ~ as.data.frame(.)) %>%
map(., function(.) .["VOT", "Pr(>|z|)"] < 0.05)
excludes <- which(exclude.by.vot == FALSE)
d <- filter(d, ! subject %in% as.character(excludes))
message(sprintf("Excluded %i subjects for having flat VOT slopes.", length(excludes)))
d <- d %>%
group_by(subject) %>%
mutate(percentBeforeDisambig = sum(as.numeric(RT.disambigOffset < 0))/n())
by.subj <- d %>%
group_by(subject, VOT, context, distance, respBeforeDisambigOffset, respBeforeTarget, respBeforeDisambigOnset) %>%
summarise(respond_t = mean(respond_t),
percentBeforeDisambig = percentBeforeDisambig[1])
ggplot(by.subj, aes(x = VOT, y = respond_t)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot, size = 0.75) +
# ggtitle("Overall Responses") +
ylab("Proportion Responses /t/") +
xlab("VOT (ms)") +
geom_hline(aes(yintercept = 0.5), linetype = "dashed", size = 2) +
theme(text = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20))
# facet_wrap(~ subject)
ggplot(subset(by.subj, respBeforeDisambigOffset < 0), aes(x = VOT, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot, size = 0.5) +
ggtitle("Responses by Context Condition") +
ylab("Proportion Responses /t/") +
xlab("Voice Onset Time (ms)") +
scale_color_manual(values = c("red", "blue"), name = "Context Disambiguation", labels = c("Dent", "Tent")) +
theme(legend.position = c(0.3, 0.85))
# annotate(geom = "text", label = "**", x = 40, y = 0.3, size = 10) +
# annotate(geom = "text", label = "**", x = 50, y = 0.5, size = 10) +
# annotate(geom = "text", label = "**", x = 70, y = 1, size = 10) +
# annotate(geom = "text", label = "**", x = 85, y = 1, size = 10) +
# annotate(geom = "text", label = "**", x = 60, y = 0.82, size = 10) +
# annotate(geom = "text", label = "**", x = 10, y = 0.25, size = 10)
ggplot(subset(by.subj, respBeforeDisambigOffset < 0), aes(x = VOT, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
facet_wrap(~ distance) +
ggtitle("Context Effect x Distance") +
theme(legend.position = "none") +
scale_color_manual(values = c("red", "blue"), name = "Context Disambiguation", labels = c("Dent", "Tent"))
ggplot(by.subj, aes(x = VOT, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
facet_wrap(~ respBeforeDisambigOffset) +
ggtitle("Left = Response After Disambig. Right = Response Before Disambig.")
mround <- function(x,base) base * round(x/base)
d$TrialBinned <- mround(d$Trial, 5)
ptrial <- ggplot(d, aes(x = TrialBinned, y = respond_t, color = context)) +
stat_summary(geom = "point", fun.y = "mean", size = 1.5) +
geom_smooth(method = "lm", alpha = 0.3) +
scale_color_manual(values = c("red", "blue"), name = "Context Disambiguation", labels = c("Dent", "Tent")) +
theme(legend.position = c(0.25, 0.9)) +
# ggtitle("Trial x Context Effect") +
xlab("Trial Number (binned)") +
ylab("Prop. Responses /t/") +
theme(legend.position = "none",
text = element_text(size = 20),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.title.y = element_text(size = 17))
ptrial
d %<>%
group_by(VOT) %>%
mutate(ambiguity = abs(mean(respond_t) - 0.5))
d$RT.disambig.outlier <- abs(scale(d$RT.disambigOffset)) > 3
meandiff <- d %>% group_by(distance) %>% summarise(meandiff = mean(disambigOffset)-mean(wordOffset))
ggplot(subset(d), aes(x = ambiguity, y = respBeforeDisambigOffset01)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
geom_smooth(method = "glm", formula = y ~ x, alpha = 0.1, color = "black", size = 0.5, method.args = list(family = "binomial")) +
xlab("VOT Ambiguity") +
ylab("Prop. Responses Before Biasing Context") +
# ggtitle("Responses Before Disambiguating Word") +
theme(text = element_text(size = 17),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 17)) +
facet_wrap(~ distance)
d$RT.outlier <- ifelse(abs(scale(d$RT)) > 3, TRUE, FALSE)
prt1 <- ggplot(subset(d, ! RT.outlier & distance == "long"),
aes(x = ambiguity, y = RT.disambigOffset)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
# geom_smooth(method = "lm", alpha = 0.05, color = "black", size = 0.5) +
xlab("VOT Ambiguity (distance from 0.5)") +
ylab("RT (ms) from Disambiguating Word Offset") +
ggtitle("Long Condition") +
geom_hline(yintercept = meandiff$meandiff[1], linetype = "dashed", color = "red") +
coord_cartesian(ylim = c(250, 1600))
prt2 <- ggplot(subset(d, ! RT.outlier & distance == "short"),
aes(x = ambiguity, y = RT.disambigOffset)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
# geom_smooth(method = "lm", alpha = 0.05, color = "black", size = 0.5) +
xlab("VOT Ambiguity (distance from 0.5)") +
ylab("RT (ms) from Disambiguating Word Offset") +
ggtitle("Short Condition") +
geom_hline(yintercept = meandiff$meandiff[2], linetype = "dashed", color = "red") +
coord_cartesian(ylim = c(250, 1600))
plot_grid(prt1, prt2)
# ggplot(subset(by.subj, respBeforeDisambigOnset < 0), aes(x = VOT, y = respond_t, color = context)) +
# 	stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
# 	facet_wrap(~ percentBeforeDisambig)
by.subj.2 <- d %>%
group_by(subject, percentBeforeDisambig, context, respBeforeDisambigOffset) %>%
summarise(respond_t = mean(respond_t))
ggplot(subset(by.subj.2, respBeforeDisambigOffset < 0), aes(x = percentBeforeDisambig, y = respond_t, color = context)) +
geom_point() +
# stat_summary(geom = "point", fun.y = "mean") +
geom_smooth(method = "glm", alpha = 0.1) +
ylab("Proportion Responses /t/") +
xlab("Proportion Trials Responded Before Disambiguating Word") +
scale_color_manual(values = c("red", "blue"), name = "Context Disambiguation", labels = c("Dent", "Tent")) +
theme(legend.position = c(0.18, 0.87))
d$context.numeric <- ifelse(d$context == "tent", 1, -1)
d$distance.numeric <- ifelse(d$distance == "long", 1, -1)
d$VOT.centered <- with(d, VOT - mean(VOT))
d$Trial.centered <- with(d, Trial - mean(Trial))
d$VOT.cat <- as.factor(d$VOT)
d$distance.cat <- as.factor(d$distance)
dexp2 <- d
load("../../bicknell_replication/results/data_preprocessed.RData")
d$respond_t <- as.numeric(d$respWord == "tent")
d$VOT <- as.numeric(as.character(d$VOT))
exclude.by.vot <- split(d, f = d$subject) %>%
map(., ~ glm(respond_t ~ VOT, ., family = "binomial")) %>%
map(summary) %>%
map("coefficients") %>%
map(., ~ as.data.frame(.)) %>%
map(., function(.) .["VOT", "Pr(>|z|)"] < 0.05)
excludes <- which(exclude.by.vot == FALSE)
d <- filter(d, ! subject %in% as.character(excludes))
d$VOT.cat <- as.factor(d$VOT)
d$context.numeric <- ifelse(d$context == "tent", 1, -1)
d$distance.numeric <- ifelse(d$distance == "long", 1, -1)
d$VOT.centered <- with(d, VOT - mean(VOT))
d$Trial.centered <- with(d, Trial - mean(Trial))
m.simple.effects <- glmer(respond_t ~ distance.numeric + VOT.cat / context.numeric +
(1 + VOT.centered + context.numeric + distance.numeric || subject),
d, family = "binomial")
library(effects)
gam.control(maxit = 10000)
d$Trial <- as.numeric(d$Trial)
contrasts(d$context) <- cbind(tent = c(-1, 1))
d$RT.outlier <- ifelse(scale(d$RT) > 3, 1, 0)
d %<>%
group_by(VOT.cat) %>%
mutate(ambiguity = abs(mean(respond_t) - 0.5))
d %<>%
group_by(VOT) %>%
mutate(ambiguity = abs(mean(respond_t) - 0.5))
dexp2 %<>%
group_by(subject, VOT) %>%
mutate(individual.ambiguity = abs(mean(respond_t) - 0.5))
dexp2$ind.amb.bin <- mround(dexp2$individual.ambiguity, 0.1)
d %<>%
group_by(subject, VOT) %>%
mutate(individual.ambiguity = abs(mean(respond_t) - 0.5))
gam.vot <- gam(respond_t ~ s(VOT.centered, by = subject), d, family = "binomial")
gam.vot <- gam(respond_t ~ s(VOT.centered, by = subject, k = 6), d, family = "binomial")
summary(gam.vot)
plot(gam.vot)
gamsubj <- EvaluateSmooths(m.ambig.gamm$gam)
gamsubj$upper <- 1/(1+exp(-(gamsubj$value + 1.96*gamsubj$se)))
gamsubj$lower <- 1/(1+exp(-(gamsubj$value - 1.96*gamsubj$se)))
gamsubj$upper.lo <- gamsubj$value + 1.96*gamsubj$se
gamsubj$lower.lo <- gamsubj$value - 1.96*gamsubj$se
gamsubj$y2 <- 1/(1+exp(-gamsubj$value))
gamsubj <- EvaluateSmooths(gam.vot)
gamsubj
gam.vot
names(gam.vot)
?Effect
gam.vot$fitted.values
Effect("VOT.centered", gam.vot)
allEffects(gam.vot)
?gam
class(d$subject)
d$subject <- as.factor(d$subject)
gam.vot <- gam(respond_t ~ s(VOT.centered, by = subject, k = 6), d, family = "binomial")
summary(gam.vot)
plot(gam.vot)
gamsubj <- EvaluateSmooths(gam.vot)
gamsubj
gamsubj$upper <- 1/(1+exp(-(gamsubj$value + 1.96*gamsubj$se)))
gamsubj$lower <- 1/(1+exp(-(gamsubj$value - 1.96*gamsubj$se)))
gamsubj$upper.lo <- gamsubj$value + 1.96*gamsubj$se
gamsubj$lower.lo <- gamsubj$value - 1.96*gamsubj$se
gamsubj$y2 <- 1/(1+exp(-gamsubj$value))
head(gamsubj)
ggplot(subset(gamsubj, by.val == 1), aes(x = x.val, y = y2)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank")
ggplot(gamsubj, aes(x = x.val, y = y2)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
facet_wrap(~ by.val)
ggplot(gamsubj, aes(x = x.val, y = y2)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
facet_wrap(~ by.val) +
ggtitle("Subject GAM VOT slopes") +
xlab("Centered VOT") +
ylab("Model-Predicted Probability of /t/ Response")
ggplot(gamsubj, aes(x = x.val, y = y2)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
facet_wrap(~ by.val) +
ggtitle("Subject GAM VOT slopes") +
xlab("Centered VOT (add 37.5 for true VOT)") +
ylab("Model-Predicted Probability of /t/ Response")
summary(gam.vot)
names(summary(gam.vot))
summary(gam.vot)$s.table
class(summary(gam.vot)$s.table)
summary(gam.vot)$s.table[, "edf"]
mean(summary(gam.vot)$s.table[, "edf"])
meandf <- mean(summary(gam.vot)$s.table[, "edf"])
meandf <- mean(summary(gam.vot)$s.table[, "ref.df"])
head(gamsubj)
nrow(gamsubj)
sum(gamsubj$y2==.5)
table(gamsubj$y2)
gamsubj %>%
group_by(by.val) %>%
summarise(num.max.ambig = sum(round(y2, digits = 2) == 0.50))
predict(gam)
?predict
predict(gam.vot)
install.packages("chemcal")
install.packages("chemCal")
library(chemCal)
?inverse.predict
gamsubj %>%
group_by(x.val) %>%
summarise(mean.resp.t = mean(y2))
tmp <- gamsubj %>%
group_by(x.val) %>%
summarise(mean.resp.t = mean(y2))
print(tmp)
print(tmp, nrow = nrow(tmp))
options(dplyr.height = Inf)
print(tmp)
ggplot(subset(d, ! RT.outlier), aes(x = individual.ambiguity, y = respBeforeDisambigOffset01)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot)
ggplot(subset(dexp2, ! RT.outlier), aes(x = individual.ambiguity, y = respBeforeDisambigOffset01)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot)
head(dexp2)
names(dexp2)
dexp2$respBeforeTarget <- ifelse(dexp2$RT.wordexp2Offset < 0, 1, -1)
dexp2$respBeforedexp2isambigOffset <- ifelse(dexp2$RT.dexp2isambigOffset < 0, 1, -1)
dexp2$respBeforedexp2isambigOnset <- ifelse(dexp2$RT.dexp2isambigOnset < 0, 1, -1)
dexp2$respBeforedexp2isambigOffset01 <- ifelse(dexp2$RT.disambigOnset < 0, 1, 0)
head(dexp2)
dexp2$respBeforeTarget <- ifelse(dexp2$RT.wordOffset < 0, 1, -1)
dexp2$respBeforeDisambigOffset <- ifelse(dexp2$RT.disambigOffset < 0, 1, -1)
dexp2$respBeforeDisambigOnset <- ifelse(dexp2$RT.disambigOnset < 0, 1, -1)
dexp2$respBeforeDisambigOffset01 <- ifelse(dexp2$RT.disambigOnset < 0, 1, 0)
ggplot(subset(dexp2, ! RT.outlier), aes(x = individual.ambiguity, y = respBeforeDisambigOffset01)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot)
d$ind.amb.bin <- mround(d$individual.ambiguity, 0.1)
ggplot(subset(dexp2, ! RT.outlier), aes(x = ind.amb.bin, y = respBeforeDisambigOffset01)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot)
m.resp2 <- glmer(respondBeforeDisambigOffset01 ~ individual.ambiguity * context.numeric * distance.numeric +
Trial + (1 | subject) + (1 | sFrame),
dexp2, family = "binomial")
m.resp2 <- glmer(respBeforeDisambigOffset01 ~ individual.ambiguity * context.numeric * distance.numeric +
Trial + (1 | subject) + (1 | sFrame),
dexp2, family = "binomial")
summary(m.resp2)
ggplot(d, aes(x = ambiguity, y = respond_t, color = context)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
scale_color_manual(values = c("red", "blue"))
rm(list=ls())
setwd("~/Dropbox/Courses/CSP519_SP17/wbushong_labs/Lab9")
sessionInfo()
library(foreign)
library(psych)
library(paramap)
library(ggplot2)
d <- read.spss("PCA Data.sav", to.data.frame = TRUE)
head(d)
covmat <- cov(d[, c("posacd", "negacd", "posrel", "negrel", "negfin")])
eigs <- eigen(covmat)
eigs
plot(eigs$values)
nrow(d)
random.eigvals <- parallel(Nvars = 5, Ncases = nrow(d),
extract = "PCA", Ndatasets = 1000, percentile = 95,
corkind = "pearson", display = "no")
random.eigvals
random.eigvals <- as.data.frame(random.eigvals$eigenvalues)
random.eigvals$ourEigvals <- eigs$values
random.eigvals
pca <- principal(d[, c("posacd", "negacd", "posrel", "negrel", "negfin")],
nfactors = 2, rotate = "varimax")
names(pca)
pca
pca$communality
pca$loadings
d$posacd.z <- scale(d$posacd)
d$negacd.z <- scale(d$negacd)
d$posrel.z <- scale(d$posrel)
d$negrel.z <- scale(d$negrel)
d$negfin.z <- scale(d$negfin)
d$PC1.unit.score <- rowMeans(d[, c("negacd.z", "negrel.z", "negfin.z")])
d$PC2.unit.score <- rowMeans(d[, c("posacd.z", "posrel.z")])
cor(d[, c("PC1.unit.score", "PC2.unit.score")])
d$PC1.exact.score <- pca$scores[, "RC1"] # scores on 1st PC
d$PC2.exact.score <- pca$scores[, "RC2"]
cor(d[, c("PC1.exact.score", "PC2.exact.score")])
PC1.weights <- pca$loadings[c("negacd", "negrel", "negfin"), "RC1"]
PC1.weights <- PC1.weights/sum(PC1.weights)
PC1.weights
d$PC1.weighted.score <- d$negacd.z*PC1.weights["negacd"] + d$negrel.z*PC1.weights["negrel"] +
d$negfin.z*PC1.weights["negfin"]
PC2.weights <- pca$loadings[c("posacd", "posrel"), "RC2"]
PC2.weights <- PC2.weights/sum(PC2.weights)
d$PC2.weighted.score <- d$posacd.z*PC2.weights["posacd"] + d$posrel.z*PC2.weights["posrel"]
cor(d[, c("PC1.weighted.score", "PC1.unit.score", "PC1.exact.score")])
cor(d[, c("PC2.weighted.score", "PC2.unit.score", "PC2.exact.score")])
m.unit <- lm(posmood ~ PC1.unit.score + PC2.unit.score, d)
summary(m.unit)
m.exact <- lm(posmood ~ PC1.exact.score + PC2.exact.score, d)
summary(m.exact)
rm(list=ls())
