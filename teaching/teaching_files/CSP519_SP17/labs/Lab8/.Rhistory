geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context),
fun.y = mean, geom = "point")
head(d)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA))
names(d)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context),
fun.y = mean, geom = "point")
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context, fill = context),
fun.y = mean, geom = "point")
residuals(m.gamm2)
residuals(m.gamm2$gam)
m.gamm.for.residuals <- gamm(respond_t ~ VOT.centered * context.numeric * distance.numeric +
I(VOT.centered**2):context.numeric,
random = list(subject = ~ 1 + context.numeric,
sFrame = ~ 1 + context.numeric),
data = d, family = "binomial", optimizer = "outer")
d$residualized.wo.ctxt.trial2 <- residuals(m.gamm.for.residuals$gam)
tmp <- EvaluateSmooths(m.gamm2$gam)
tmp$upper <- 1/(1+exp(-(tmp$value + 1.96*tmp$se)))
tmp$lower <- 1/(1+exp(-(tmp$value - 1.96*tmp$se)))
tmp$y2 <- 1/(1+exp(-tmp$value))
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
head(d)
d$residualized.wo.ctxt.trial2 <- 1/(1+exp(-(residuals(m.gamm.for.residuals$gam))))
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
d$TrialBinned <- mround(d$Trial, 5)
d$TrialBinned <- mround(d$Trial, 3)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
d$TrialBinned <- mround(d$Trial, 5)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
d$TrialBinned <- mround(d$Trial, 3)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
d$TrialBinned <- mround(d$Trial, 2)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = TrialBinned, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point", size = 0.2)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point", size = 0.4)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point", size = 0.6)
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = d, aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
5%5
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = subset(d, Trial %% 5 == 0), aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context,
fill = context), fun.y = mean, geom = "point")
ggplot(tmp, aes(x = x.val, y = y2, color = by.val, fill = by.val)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1, linetype = "blank") +
scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("red", "blue")) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(.4, .65)) +
theme(plot.background = element_rect(fill = "transparent", color = NA),
panel.background = element_rect(fill = "transparent", color = NA)) +
stat_summary(data = subset(d, Trial %% 3 == 0),
aes(x = Trial, y = residualized.wo.ctxt.trial2, color = context, fill = context),
fun.y = mean, geom = "point")
install.packages("itsadug")
library(itsadug)
get_difference(m.gamm2, comp = list(context.numeric=c(-1, 1)))
get_difference(m.gamm2, comp = list(context.numeric=c(-1, 1)), rm.ranef = T)
get_difference(m.gamm2$gam, comp = list(context.numeric=c(-1, 1)))
m.gamm2$gam
get_difference(m.gamm2$lme, comp = list(context.numeric=c(-1, 1)))
get_difference(m.gamm2$gam, comp = list(context.numeric=c(-1, 1)))
m.test <- gam(respond_t ~ VOT.centered * context.numeric * distance.numeric +
I(VOT.centered**2):context.numeric,
data = d, family = "binomial", optimizer = "outer")
summary(m.test)
get_difference(m.test, comp = list(context.numeric=c(-1, 1)))
?get_difference
get_difference(m.test, comp = list(context.numeric=c(-1, 1)), cond = list(Trial = seq(1, 160, by = 2)))
get_difference(m.test, comp = list(context.numeric=c(-1, 1)), cond = list(Trial = 1))
m.test
m.test <- gam(respond_t ~ VOT.centered * context.numeric * distance.numeric +
I(VOT.centered**2):context.numeric + s(Trial,by = context),
data = d, family = "binomial", optimizer = "outer")
get_difference(m.test, comp = list(context.numeric=c(-1, 1)), cond = list(Trial = 1))
get_difference(m.test, comp = list(context.numeric=c(-1, 1)), cond = list(Trial = seq(1, 160, by = 10)))
summary(m.test)
m.test <- gam(respond_t ~ VOT.centered * context.numeric * distance.numeric +
I(VOT.centered**2):context.numeric + s(Trial, by = context) +
s(context.numeric, by = subject, bs = "re"),
data = d, family = "binomial", optimizer = "outer")
summary(m.test)
plot(m.test$gam)
plot(m.test)
m.test <- gam(respond_t ~ VOT.centered * context.numeric * distance.numeric +
I(VOT.centered**2):context.numeric + s(Trial, by = context) +
s(context.numeric, VOT.centered, by = subject, bs = "re"),
data = d, family = "binomial", optimizer = "outer")
summary(m.test)
plot(m.test)
m.test <- gam(respond_t ~ VOT.centered * context.numeric * distance.numeric +
I(VOT.centered**2):context.numeric + s(Trial, by = context) +
s(context.numeric, subject, bs = "re"),
data = d, family = "binomial", optimizer = "outer")
summary(m.test)
plot(m.test)
m.test <- gam(respond_t ~ VOT.centered * context.numeric * distance.numeric +
I(VOT.centered**2):context.numeric + s(Trial, by = context) +
s(subject, bs = "re"),
data = d, family = "binomial", optimizer = "outer")
summary(m.test)
plot(m.test)
save.image("models.RData")
rm(list=ls())
setwd("~/Dropbox/Projects/DitransitiveDefiniteness/corpus/COCA")
library(tidyverse)
library(lme4)
library(cowplot)
library(binom)
source("compute.surprisal.defs.R")
d <- read.csv("MadelineAnnotations.csv", fileEncoding = "latin1")
d2 <- read.csv("EvanAnnotations.csv", fileEncoding = "latin1")
head(d)
head(d2)
names(d)==names(d2)
names(d)
names(d2)
head(d2)
d2$COCA.search.index.no. <- NULL
names(d)==names(d2)
d <- rbind(d, d2)
names(d) <- c("Verb", "Sentence", "MainVerb", "Ditransitive", "Structure", "NP1Defin", "NP2Defin")
nrow(d)
mains <- subset(d, MainVerb == "Yes")
nrow(mains)
head(mains)
m <- glmer(Ditransitive == "Yes" ~ 1 +
(1 | Verb),
mains,
family = "binomial")
summary(m)
proportions <- mains %>%
group_by(Verb) %>%
count(Ditransitive) %>%
group_by(Verb) %>%
mutate(prop = n/sum(n),
lower.ci = binom.confint(n, sum(n), methods = "exact")$lower,
upper.ci = binom.confint(n, sum(n), methods = "exact")$upper)
proportions <- proportions[order(proportions$prop), ]
proportions <- proportions[order(proportions$Ditransitive), ]
proportions$Verb <- factor(proportions$Verb, levels = unique(proportions$Verb))
p1 <- ggplot(subset(proportions, Ditransitive == "Yes"), aes(x = Verb, y = prop)) +
geom_point() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = 0.2) +
ylab("Proportion Ditransitive") +
ggtitle("Proportion of Verbs Used in Ditransitive Structure") +
geom_hline(yintercept = 0.5, linetype = "dashed")
p1
ditransitives <- subset(mains, Ditransitive == "Yes")
m2 <- glmer(Structure == "Double Object" ~ 1 +
(1 | Verb),
ditransitives,
family = "binomial")
nrow(ditransitives)
m2 <- glmer(Structure == "Double Object" ~ 1 +
(1 | Verb),
ditransitives,
family = "binomial")
summary(m2)
proportions2 <- ditransitives %>%
group_by(Verb) %>%
count(Structure) %>%
group_by(Verb) %>%
mutate(prop = n/sum(n),
lower.ci = binom.confint(n, sum(n), methods = "exact")$lower,
upper.ci = binom.confint(n, sum(n), methods = "exact")$upper)
proportions2 <- proportions2[order(proportions2$prop), ]
proportions2 <- proportions2[order(proportions2$Structure), ]
proportions2$Verb <- factor(proportions2$Verb, levels = unique(proportions2$Verb))
p2 <- ggplot(subset(proportions2, Structure == "Double Object"), aes(x = Verb, y = prop)) +
geom_point() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = 0.2) +
ylab("Proportion DO") +
ggtitle("Proportion of DOs") +
geom_hline(yintercept = 0.5, linetype = "dashed")
p2
plot_grid(p1, p2)
definites <- subset(ditransitives, ! NP1Defin == "Other" & ! NP2Defin =="Other" & ! is.na(NP2Defin))
nrow(definites)
definites$order <- with(definites, ifelse(NP1Defin == "Definite", ifelse(NP2Defin == "Definite", "definite-definite", "definite-indefinite"),
ifelse(NP2Defin == "definite", "indefinite-definite", "indefinite-indefinite")))
definites
proportions3 <- definites %>%
group_by(Verb, Structure) %>%
count(order) %>%
group_by(Verb, Structure) %>%
mutate(prop = n/sum(n),
lower.ci = binom.confint(n, sum(n), methods = "exact")$lower,
upper.ci = binom.confint(n, sum(n), methods = "exact")$upper)
proportions3 <- proportions3[order(proportions3$prop), ]
proportions3 <- proportions3[order(proportions3$order), ]
proportions3$Verb <- factor(proportions3$Verb, levels = unique(proportions3$Verb))
p3 <- ggplot(proportions3, aes(x = Verb, y = prop, color = order)) +
geom_point() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = 0.2) +
ylab("Proportion Def. Ordering") +
ggtitle("Proportion of DOs") +
geom_hline(yintercept = 0.5, linetype = "dashed") +
facet_wrap(~ Structure)
p3
proportions4 <- definites %>%
group_by(Structure) %>%
count(order) %>%
group_by(Structure) %>%
mutate(prop = n/sum(n),
lower.ci = binom.confint(n, sum(n), methods = "exact")$lower,
upper.ci = binom.confint(n, sum(n), methods = "exact")$upper)
ggplot(proportions4, aes(x = Structure, y = prop, color = order)) +
geom_point() +
geom_errorbar(aes(ymin = lower.ci, ymax = upper.ci), width = 0.2) +
ylab("Proportion Def. Order") +
ggtitle("Proportion of Def. Orders by Structure") +
geom_hline(yintercept = 0.5, linetype = "dashed")
final.df <- compute.surprisal.defs(proportions3)
final.df$region <- factor(final.df$region, levels = c("NP1", "Structure", "NP2"))
final.df$surprisal2 <- final.df$surprisal # this is for the averaging of NP2Realization/NP2 in DOs
d1 <- subset(final.df, Structure == "Prepositional Object")
d2 <- subset(final.df, Structure == "Double Object")
x <- c()
for (i in unique(d2$Verb)) {
for (j in unique(d2$order)) {
ss <- subset(d2, Verb == i & order == j)
ss$surprisal2[ss$region == "NP2"] <- mean(ss$surprisal[ss$region %in% c("Structure", "NP2")])
x <- rbind(x, ss)
}
}
d2 <- x
d2 <- subset(d2, region != "Structure")
final.df <- rbind(d1, d2)
ggplot(final.df, aes(x = region, y = surprisal, color = order, group = order)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
stat_summary(geom = "line", fun.y = mean) +
facet_wrap(~ Structure)
ggplot(subset(final.df, order %in% c("definite-indefinite", "indefinite-definite")),
aes(x = region, y = surprisal, color = order, group = order)) +
stat_summary(geom = "pointrange", fun.data = mean_cl_boot) +
stat_summary(geom = "line", fun.y = mean) +
scale_color_manual(values = c("royalblue", "firebrick")) +
facet_wrap(~ Structure) +
theme(legend.position = c(0.8, 0.9))
system("open compute.surprisal.defs.R")
rm(list=ls())
setwd("~/Dropbox/Courses/CSP519_SP17/wbushong_labs/Lab8/")
library(ggplot2)
load("SPR_Data.RData")
head(d)
library(effects)
p <- ggplot(d, aes(x = Trial, y = RawRT))
p
range(d$Trial)
range(d$RawRT)
p <- p + # take our blank canvas and add onto it
geom_point()
p
nrow(d)
p2 <- ggplot(d, aes(x = Trial, y = RawRT)) + # I'm just making a new plot with a new blank canvas so that it's clear what's going on
stat_summary(geom = "point", fun.y = "mean")
p2
p3 <- ggplot(d, aes(x = Trial, y = RawRT)) + # I'm just making a new plot with a new blank canvas so that it's clear what's going on
stat_summary(geom = "point", fun.y = "median")
p3
p4 <- ggplot(d, aes(x = Trial, y = RawRT)) + # I'm just making a new plot with a new blank canvas so that it's clear what's going on
stat_summary(geom = "pointrange", fun.data = "mean_cl_boot")
p4
p.smoothline <- p2 +
geom_smooth(method = "lm")
p.smoothline
m <- lm(RawRT ~ Trial + structure + order + region, d)
predictions <- Effect("Trial", m) # first argument = effect you want; second argument = model object
?Effect
predictions <- Effect("Trial", m,
xlevels=list(Trial = seq(0, 170, 10))) # first argument = effect you want; second argument = model object
predictions
predictions <- as.data.frame(predictions) # turn this into something ggplot2 will take
predictions
p.predictionline <- ggplot(predictions, aes(x = Trial, y = fit)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1) # alpha controls transparency; if we didn't set it to anything we would end up with an ugly black box
p.predictionline
p.predictionsAndData <- p.predictionline +
stat_summary(data = d, aes(y = RawRT), geom = "point", fun.y = "mean")
p.predictionsAndData
predictions <- Effect("Trial", m, # first argument = effect you want; second argument = model object
xlevels=list(Trial = seq(0, max(d$Trial), 10))) # xlevels argument: how many predictions do you want to make?
predictions <- as.data.frame(predictions) # turn this into something ggplot2 will take
predictions
max(d$Trial)
predictions <- Effect("Trial", m, # first argument = effect you want; second argument = model object
xlevels=list(Trial = seq(0, max(d$Trial)))) # xlevels argument: how many predictions do you want to make?
predictions <- as.data.frame(predictions) # turn this into something ggplot2 will take
predictions
p.predictionline <- ggplot(predictions, aes(x = Trial, y = fit)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1) # alpha controls transparency; if we didn't set it to anything we would end up with an ugly black box
p.predictionline
p.predictionsAndData <- p.predictionline +
stat_summary(data = d, aes(y = RawRT), geom = "point", fun.y = "mean")
p.predictionsAndData
detach("cowplot")
detach(cowplot)
?detach
library(ggplot2)
library(effects)
load("SPR_Data.RData")
head(d)
p <- ggplot(d, aes(x = Trial, y = RawRT))
p
range(d$Trial)
range(d$RawRT)
p <- p + # take our blank canvas and add onto it
geom_point()
p
nrow(d)
p2 <- ggplot(d, aes(x = Trial, y = RawRT)) + # I'm just making a new plot with a new blank canvas so that it's clear what's going on
stat_summary(geom = "point", fun.y = "mean")
p2
p3 <- ggplot(d, aes(x = Trial, y = RawRT)) + # I'm just making a new plot with a new blank canvas so that it's clear what's going on
stat_summary(geom = "point", fun.y = "median")
p3
p4 <- ggplot(d, aes(x = Trial, y = RawRT)) + # I'm just making a new plot with a new blank canvas so that it's clear what's going on
stat_summary(geom = "pointrange", fun.data = "mean_cl_boot")
p4
p.smoothline <- p2 +
geom_smooth(method = "lm")
p.smoothline
m <- lm(RawRT ~ Trial + structure + order + region, d)
predictions <- Effect("Trial", m, # first argument = effect you want; second argument = model object
xlevels=list(Trial = seq(0, max(d$Trial)))) # xlevels argument: how many predictions do you want to make?
predictions <- as.data.frame(predictions) # turn this into something ggplot2 will take
predictions
p.predictionline <- ggplot(predictions, aes(x = Trial, y = fit)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.1) # alpha controls transparency; if we didn't set it to anything we would end up with an ugly black box
p.predictionline
p.predictionsAndData <- p.predictionline +
stat_summary(data = d, aes(y = RawRT), geom = "point", fun.y = "mean")
p.predictionsAndData
